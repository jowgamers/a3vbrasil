/*
 ============================================================================
 Name        : Recursividade.c
 Author      : Amanda
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

//Protótipos
int fatorialRecursivo(int n);
int fatorialIterativo(int n);
int fatorialRecursivoCauda(int n, int soma);

int fibonacciIterativo(int termo);
int fibonacciRecursivo(int termo);
int fibonaccitRecursivoCauda(int termo, int penultimo, int ultimo);


//Funções
int main(void) {
	setbuf(stdout, NULL);

	//Fatorial
	//printf("\nFatorial Iterativo - %d\n", fatorialIterativo(5));
	//printf("\nFatorial Recursivo - %d\n", fatorialRecursivo(5));
	//printf("\nFatorial Recursivo - %d\n", fatorialRecursivoCauda(5, 1));

	//Fibonacci
//	printf("\nFibonacci Iterativo - %d\n", fibonacciIterativo(50));
//	printf("\nFibonacci Recursivo - %d\n", fibonacciRecursivo(50));
	printf("\nFibonacci Recursivo Cauda - %d\n", fibonaccitRecursivoCauda(50, 0, 1));

	return EXIT_SUCCESS;
}

int fatorialIterativo(int n){
	int i, fatorial = 1;
	for (i = n; i >= 2; i--){
		fatorial *= i;
	}
	return fatorial;
}

int fatorialRecursivoCauda(int n, int fatorial){
	if (n <= 1){
		return fatorial;
	} else {
		return fatorialRecursivoCauda(n-1, fatorial * n);
	}
}

int fatorialRecursivo(int n){
	if (n <= 1){
		return 1;
	} else {
		return n * fatorialRecursivo(n-1);
	}
}


int fibonacciIterativo(int termo){
	if (termo <= 2)
		return termo-1;

	int 	penultimo = 0,
			ultimo = 1,
			soma,	i;

	for (i = 3; i <= termo; i++) {
		soma = ultimo + penultimo;
		penultimo = ultimo;
		ultimo = soma;
	}

	return soma;
}

int fibonaccitRecursivoCauda(int termo, int penultimo, int ultimo){
	if (termo == 1){
		return penultimo;
	} else {
		return fibonaccitRecursivoCauda(termo-1, ultimo, penultimo + ultimo);
	}
}

int fibonacciRecursivo(int termo){
	if (termo <= 2) {
		return termo - 1;
	} else {
		return fibonacciRecursivo(termo - 1) + fibonacciRecursivo(termo - 2);
	}

}

---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
/*
 ============================================================================
 Name        : listaRecursividade.c
 Author      : Amanda
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

//Protótipos
//Exercício 01
int somarIterativo(int x, int y);
int somarRecursivo(int x, int y);
int somarRecursivoCauda(int x, int y, int soma);

void exibirMultiplicacaoRecursivo(int a, int b);

float somarSerie(int n);
float somarSerieRecursivoCauda(int n, float resultado);

int somarVetorIterativo(int *vet, int tamanho);
int somarVetorRecursivo(int *vet, int tamanho);
int somarVetorRecursivoCauda(int *vet, int tamanho, int soma);

//Funções
int main(void) {
	setbuf(stdout, NULL);
	//Exercício 01
	//printf("\n5 * 7 = %d\n", somarIterativo(5, 7));
	//printf("\n0 * 7 = %d\n", somarRecursivo(0, 7));
	//printf("\n5 * 7 = %d\n", somarRecursivoCauda(5, 7, 0));

	//Exercício 02
	//exibirMultiplicacaoRecursivo(5, 6);

	//Exercício 03
	//printf("\nResultado do somatório é %.2f\n", somarSerie(3));
	//printf("\nResultado do somatório de cauda é %.2f\n", somarSerieRecursivoCauda(3, 0));;

	//Exercício 04
	int tamanho = 5;
	int *vet = (int*) malloc (tamanho * sizeof(int));
	//printf("\n%d\n", somarVetorIterativo(vet, tamanho));
	//printf("\n%d\n", somarVetorRecursivo(vet, tamanho));
	printf("\n%d\n", somarVetorRecursivoCauda(vet, tamanho, 0));

	//Exercício 05

	return EXIT_SUCCESS;
}

//Exercício 01 - Multiplicação por somas recursivas
int somarIterativo(int x, int y){
	int i, resultado = 0;
	for (i = 1; i <= x; i++){
		resultado += y;
	}
	return resultado;
}

int somarRecursivo(int x, int y){
	if (y == 0 || x == 0) {
		return 0;
	} else if (x == 1) {
		return y;
	} else {
		return y + somarRecursivo(x-1, y);
	}
}

int somarRecursivoCauda(int x, int y, int soma){
	if (y == 0 || x == 0) {
		return 0;
	} else if (x == 1) {
		return soma + y;
	} else {
		return somarRecursivoCauda(x-1, y, y + soma);
	}
}

//Exercício 02 - Exibir tabuada
void exibirMultiplicacaoRecursivo(int a, int b){
	if (b <= 1){
		printf("\n%d * %d = %d\n", a, b, a * b);
	} else {
		exibirMultiplicacaoRecursivo(a, b-1);
		printf("\n%d * %d = %d\n", a, b, a * b);
	}

	/*As linhas abaixo substituem as linhas acima, porém,
	 * observe que não existe caso base explícito, mas ele está presente.
	 */

	//	if (b > 1){
	//		exibirMultiplicacaoRecursivo(a, b-1);
	//	}
	//
	//	printf("\n%d * %d = %d\n", a, b, a * b);

}

//Exercício 04 - Somar itens de um vetor
//Preencher o vetor com x elementos aleatórios
//Somar os elementos de um vetor.

float somarSerie(int n){
	if (n == 1) {
		return 1;
	} else {
		return pow(n, 3) / pow(10, n-1) + somarSerie(n-1);
	}
}

float somarSerieRecursivoCauda(int n, float resultado){
	if (n == 0){
		return resultado;
	} else {
		return somarSerieRecursivoCauda(n - 1, pow(n, 3) / pow(10, n-1) + resultado);
	}
}


int somarVetorIterativo(int *vet, int tamanho){
	int i, soma = 0;
	for (i = 1; i <= tamanho; i++){
		*vet = rand() % 100; //Preenchi o conteúdo da apontada
		printf("\n%d\n", *vet);
		soma += *vet; //Somei o conteúdo
		vet++; //Passei para o próximo endereço de memória
	}
	return soma;
}

int somarVetorRecursivo(int *vet, int tamanho){
	//Preenche o espaço de memória
	*vet = rand() % 100;
	printf("\n%d\n", *vet);

	if (tamanho == 1) {
		return *vet; //retorna só o espaço atual.
	} else {
		return *vet + somarVetorRecursivo(vet+1, tamanho-1);
	}
}

int somarVetorRecursivoCauda(int *vet, int tamanho, int soma){
	//Preenche o espaço de memória
	*vet = rand() % 100;
	printf("\n%d\n", *vet);

	if (tamanho == 0){
		return soma;
	} else{
		return somarVetorRecursivoCauda(vet+1, tamanho-1, soma + *vet);
	}
}





---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

/*
 ============================================================================
 Name        : listaNovosTipos.c
 Author      : Amanda
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//Estrutura
struct prod{
	char nomeProduto[40];
	int codigo;
	float preco;
	int quantidade;
};

typedef struct prod produto;

/* As linhas abaixo substituem o código da linha 15 até 22
typedef struct {
	char nomeProduto[40];
	int codigo;
	float preco;
	int quantidade;
} produto;
*/

//Protótipo
void menu();
int validaQtde(char *texto);
int cadastrarCodigo();
void cadastrarNome(produto *pProd);
void cadastrarPreco(float *valor);
void cadastrarQuantidade(produto *prod);
void cadastrar(int numero, produto *pProd);
void imprimirEstoque(int numero, produto *pProd);
void imprimirSemEstoque(int numero, produto *pProd);


//Funções
int main(void) {
	setbuf(stdout, NULL);
	menu();
	return 0;
}


void menu(){
	char menu = ' ';
	produto *pProd;
	int numero = 0;

	while (menu != 'E') {

		//Receber o menu
		printf("\nA - Criar estrutura"
				"\nB - Cadastrar produtos"
				"\nC - Exibir produtos com estoque zerado"
				"\nD - Exibir todos os produtos em estoque"
				"\nE - Finalizar"
				"\nDigite sua opção: ");
		fflush(stdin);
		scanf("%c", &menu);

		switch(menu){
		case 'A' :
			numero = validaQtde("Digite a quantidade de produtos: ");
			pProd = (produto*) malloc (numero * sizeof(produto));
			break;
		case 'B':
			if (numero > 0) {
				cadastrar(numero, pProd);
			}
			break;
		case 'C':
			if (numero > 0) {
				imprimirSemEstoque(numero, pProd);
			}
			break;
		case 'D':
			if (numero > 0) {
				imprimirEstoque(numero, pProd);
			}
			break;
		case 'E':
			printf("\nPrograma finalizado");
			break;
		default:
			printf("\nOpção inválida");
			break;
		}

	}
}

int validaQtde(char *texto){
	int numero;
	do{
		printf("\n%s", texto);
		scanf("%d", &numero);

		if (numero <= 0) {
			printf("\nValor inválido.");
		}
	} while (numero <= 0);

	return numero;
}


int cadastrarCodigo(){
	int codigo;
	do{
		printf("\nDigite o código: ");
		scanf("%d", &codigo);

		if (codigo < 0 || codigo > 50){
			printf("\nCódigo inválid.");
		}
	} while (codigo < 0 || codigo > 50);
	return codigo;
}

void cadastrarNome(produto *pProd){
	do{
		printf("\nDigite o nome do produto: ");
		fflush(stdin);
		gets(pProd->nomeProduto);

		if (strlen(pProd->nomeProduto) == 0) {
			printf("\nNome inválido.");
		}

	} while (strlen(pProd->nomeProduto) == 0);
}

void cadastrarPreco(float *valor){
	do{
		printf("\nDigite o preço do produto:");
		scanf("%f", valor);

		if (*valor < 0) {
			printf("\nValor inválido.");
		}
	} while (*valor < 0);
}


void cadastrarQuantidade(produto *prod){
	do {
		printf("\nDigite a quantidade em estoque do produto %s:", prod->nomeProduto);
		scanf("%d", &prod->quantidade);

		if (prod->quantidade < 0){
			printf("\nValor inválido.");
		}
	} while (prod->quantidade < 0);
}

void cadastrar(int numero, produto *pProd){
	int i;
	for (i = 0; i < numero; i++){
		printf("\nProduto %d", i+1);
		pProd->codigo = cadastrarCodigo();
		cadastrarNome(pProd);
		cadastrarPreco(&pProd->preco);
		cadastrarQuantidade(pProd);
		pProd++;
	}
}

void imprimirEstoque(int numero, produto *pProd){
	int i;
	for (i = 0; i < numero; i++){
		printf("\n%d\t%s\tR$%.2f\t%d", pProd->codigo,
							   pProd->nomeProduto,
							   pProd->preco,
							   pProd->quantidade);
		pProd++;
	}
}

void imprimirSemEstoque(int numero, produto *pProd){
	int i;
	for (i = 0; i < numero; i++){
		if (pProd->quantidade == 0){
			printf("\n%d\t%s\tR$%.2f\t%d", pProd->codigo,
								   pProd->nomeProduto,
								   pProd->preco,
								   pProd->quantidade);
		}
		pProd++;
	}
}





---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------


/*
 * Biblioteca.h
 *
 *  Created on: 16 de out de 2018
 *      Author: amanda.oliveira
 */

#ifndef BIBLIOTECA_H_
#define BIBLIOTECA_H_

#define TAM 5
#define MAX(a, b) ((a>b) ? (a) : (b))
#define SQR(x) (x) * (x)


#endif /* BIBLIOTECA_H_ */
